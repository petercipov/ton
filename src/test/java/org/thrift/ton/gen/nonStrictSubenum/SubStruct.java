/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.thrift.ton.gen.nonStrictSubenum;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SubStruct implements org.apache.thrift.TBase<SubStruct, SubStruct._Fields>, java.io.Serializable, Cloneable, Comparable<SubStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubStruct");

  private static final org.apache.thrift.protocol.TField SUBE_FIELD_DESC = new org.apache.thrift.protocol.TField("sube", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField I16_N_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_n", org.apache.thrift.protocol.TType.I16, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubStructTupleSchemeFactory());
  }

  /**
   * 
   * @see Subenum
   */
  public Subenum sube; // required
  public short i16_n; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Subenum
     */
    SUBE((short)1, "sube"),
    I16_N((short)2, "i16_n");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBE
          return SUBE;
        case 2: // I16_N
          return I16_N;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __I16_N_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBE, new org.apache.thrift.meta_data.FieldMetaData("sube", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Subenum.class)));
    tmpMap.put(_Fields.I16_N, new org.apache.thrift.meta_data.FieldMetaData("i16_n", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubStruct.class, metaDataMap);
  }

  public SubStruct() {
  }

  public SubStruct(
    Subenum sube,
    short i16_n)
  {
    this();
    this.sube = sube;
    this.i16_n = i16_n;
    setI16_nIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubStruct(SubStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSube()) {
      this.sube = other.sube;
    }
    this.i16_n = other.i16_n;
  }

  public SubStruct deepCopy() {
    return new SubStruct(this);
  }

  @Override
  public void clear() {
    this.sube = null;
    setI16_nIsSet(false);
    this.i16_n = 0;
  }

  /**
   * 
   * @see Subenum
   */
  public Subenum getSube() {
    return this.sube;
  }

  /**
   * 
   * @see Subenum
   */
  public SubStruct setSube(Subenum sube) {
    this.sube = sube;
    return this;
  }

  public void unsetSube() {
    this.sube = null;
  }

  /** Returns true if field sube is set (has been assigned a value) and false otherwise */
  public boolean isSetSube() {
    return this.sube != null;
  }

  public void setSubeIsSet(boolean value) {
    if (!value) {
      this.sube = null;
    }
  }

  public short getI16_n() {
    return this.i16_n;
  }

  public SubStruct setI16_n(short i16_n) {
    this.i16_n = i16_n;
    setI16_nIsSet(true);
    return this;
  }

  public void unsetI16_n() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I16_N_ISSET_ID);
  }

  /** Returns true if field i16_n is set (has been assigned a value) and false otherwise */
  public boolean isSetI16_n() {
    return EncodingUtils.testBit(__isset_bitfield, __I16_N_ISSET_ID);
  }

  public void setI16_nIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I16_N_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUBE:
      if (value == null) {
        unsetSube();
      } else {
        setSube((Subenum)value);
      }
      break;

    case I16_N:
      if (value == null) {
        unsetI16_n();
      } else {
        setI16_n((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBE:
      return getSube();

    case I16_N:
      return Short.valueOf(getI16_n());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUBE:
      return isSetSube();
    case I16_N:
      return isSetI16_n();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubStruct)
      return this.equals((SubStruct)that);
    return false;
  }

  public boolean equals(SubStruct that) {
    if (that == null)
      return false;

    boolean this_present_sube = true && this.isSetSube();
    boolean that_present_sube = true && that.isSetSube();
    if (this_present_sube || that_present_sube) {
      if (!(this_present_sube && that_present_sube))
        return false;
      if (!this.sube.equals(that.sube))
        return false;
    }

    boolean this_present_i16_n = true;
    boolean that_present_i16_n = true;
    if (this_present_i16_n || that_present_i16_n) {
      if (!(this_present_i16_n && that_present_i16_n))
        return false;
      if (this.i16_n != that.i16_n)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SubStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSube()).compareTo(other.isSetSube());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSube()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sube, other.sube);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16_n()).compareTo(other.isSetI16_n());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16_n()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_n, other.i16_n);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubStruct(");
    boolean first = true;

    sb.append("sube:");
    if (this.sube == null) {
      sb.append("null");
    } else {
      sb.append(this.sube);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("i16_n:");
    sb.append(this.i16_n);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubStructStandardSchemeFactory implements SchemeFactory {
    public SubStructStandardScheme getScheme() {
      return new SubStructStandardScheme();
    }
  }

  private static class SubStructStandardScheme extends StandardScheme<SubStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sube = Subenum.findByValue(iprot.readI32());
              struct.setSubeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // I16_N
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16_n = iprot.readI16();
              struct.setI16_nIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sube != null) {
        oprot.writeFieldBegin(SUBE_FIELD_DESC);
        oprot.writeI32(struct.sube.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(I16_N_FIELD_DESC);
      oprot.writeI16(struct.i16_n);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubStructTupleSchemeFactory implements SchemeFactory {
    public SubStructTupleScheme getScheme() {
      return new SubStructTupleScheme();
    }
  }

  private static class SubStructTupleScheme extends TupleScheme<SubStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSube()) {
        optionals.set(0);
      }
      if (struct.isSetI16_n()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSube()) {
        oprot.writeI32(struct.sube.getValue());
      }
      if (struct.isSetI16_n()) {
        oprot.writeI16(struct.i16_n);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.sube = Subenum.findByValue(iprot.readI32());
        struct.setSubeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.i16_n = iprot.readI16();
        struct.setI16_nIsSet(true);
      }
    }
  }

}

